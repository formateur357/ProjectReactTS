import React, { useState, ChangeEvent, FormEvent } from "react";
import { TodoItemInterface } from "../models/TodoItem.model";

// Props attendues par le composant TodoItem
interface TodoItemProps {
  todo: TodoItemInterface; // Une t√¢che unique
  onToggleTodo: (id: number) => void; // Callback pour basculer l'√©tat complet/incomplet
  onDeleteTodo: (id: number) => void; // Callback pour supprimer une t√¢che
  onEditTodo: (id: number, newTitle: string) => void; // Callback pour √©diter une t√¢che
}

// Composant fonctionnel TodoItem
function TodoItem({
  todo,
  onToggleTodo,
  onDeleteTodo,
  onEditTodo,
}: TodoItemProps) {
  const [isEditing, setIsEditing] = useState(false); // √âtat pour g√©rer si on est en mode √©dition ou pas
  const [editTitle, setEditTitle] = useState(todo.title); // √âtat pour le titre en cours d'√©dition

  // Fonction pour g√©rer la soumission du formulaire d'√©dition
  const handleEditSubmit = (event: FormEvent) => {
    event.preventDefault(); // Emp√™che le rechargement de la page
    const trimmedTitle = editTitle.trim(); // Supprime les espaces inutiles autour du titre
    if (trimmedTitle) {
      onEditTodo(todo.id, trimmedTitle); // Appelle la fonction du parent pour mettre √† jour la t√¢che
      setIsEditing(false); // Quitte le mode √©dition
    }
  };

  return (
    <li style={{ display: "flex", alignItems: "center", gap: "0.5rem" }}>
      {/* Checkbox pour marquer une t√¢che comme compl√®te/incompl√®te */}
      <input
        type="checkbox"
        checked={todo.completed} // Liaison avec l'√©tat d'ach√®vement
        onChange={() => onToggleTodo(todo.id)} // Appelle la fonction pour basculer l'√©tat
        aria-label="Marquer cette t√¢che comme compl√©t√©e ou non"
      />

      {/* Affichage conditionnel du titre ou du champ de saisie en fonction du mode √©dition */}
      {isEditing ? (
        <form onSubmit={handleEditSubmit} style={{ flexGrow: 1 }}>
          <input
            type="text"
            value={editTitle} // Liaison avec le titre en cours d'√©dition
            onChange={(e: ChangeEvent<HTMLInputElement>) =>
              setEditTitle(e.target.value)
            } // Met √† jour le titre en direct
            autoFocus // Focus automatique pour am√©liorer l'ergonomie
          />
        </form>
      ) : (
        <span
          style={{
            textDecoration: todo.completed ? "line-through" : "none", // Barre le texte si la t√¢che est compl√©t√©e
            flexGrow: 1, // Le texte occupe tout l'espace restant
          }}
        >
          {todo.title}
        </span>
      )}

      {/* Bouton √âditer ou Enregistrer selon le mode */}
      {isEditing ? (
        <button
          type="submit" // N√©cessaire pour la soumission dans le formulaire
          onClick={handleEditSubmit} // Enregistre la modification
          aria-label="Enregistrer la modification"
        >
          üíæ
        </button>
      ) : (
        <button
          onClick={() => setIsEditing(true)} // Active le mode √©dition
          aria-label="√âditer cette t√¢che"
        >
          ‚úèÔ∏è
        </button>
      )}

      {/* Petite barre verticale pour s√©parer les actions */}
      <span style={{ margin: "0 0.5rem" }}>|</span>

      {/* Bouton Supprimer */}
      <button
        onClick={() => onDeleteTodo(todo.id)} // Appelle la fonction pour supprimer la t√¢che
        aria-label="Supprimer cette t√¢che"
      >
        ‚úò
      </button>
    </li>
  );
}

export default TodoItem;
